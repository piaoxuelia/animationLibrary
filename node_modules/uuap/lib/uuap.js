var when = require("when");
var cookie = require("cookie");
var request = require("request");

var querystring = require("querystring");
var crypto = require("crypto");
var util = require("util");
var url = require("url");

/**
 * 360内网统一认证nodejs版本
 * 接口和PHP版本保持一致
 */

/**
 * 计算字符串的md5值
 * @param  {[type]} str [description]
 * @return {[type]}     [description]
 */
function md5(str){
	var instance = crypto.createHash('md5');
    instance.update(str);
    return instance.digest('hex');
}
/**
 * 扩展一个对象的方法
 * @param  {[type]} origin [description]
 * @param  {[type]} add    [description]
 * @return {[type]}        [description]
 */
function extend(origin, add){
    if (typeof add == 'function') {
        add = add();
    };
    return util._extend(origin || {}, add || {});
};
/**
 * 生成一个promise,如果传入的参数是promise则直接返回
 * @param  {[type]} obj [description]
 * @return {[type]}     [description]
 */
global.get_promise = function(obj){
    if (when.isPromise(obj)) {
        return obj;
    };
    var deferred = when.defer();
    process.nextTick(function(){
        deferred.resolve(obj);
    })
    return deferred.promise;
}

/**
 * 对字符串执行 ROT13 编码。
 * ROT-13 编码是一种每一个字母被另一个字母代替的方法。
 * 这个代替字母是由原来的字母向前移动 13 个字母而得到的。数字和非字母字符保持不变。
 * @param  {[type]} s [description]
 * @return {[type]}   [description]
 */
function rot13(s){
	var i;
	var rotated = '';
	s = s || "";
	for (i=0; i<s.length; i++) {
		var ch = s.charCodeAt(i);
		// a-z -> n-m
		if (97 <= ch && ch <= 122) {
		  	rotated += String.fromCharCode( (ch-97 + 13) % 26 + 97);
		// A-Z -> N-M
		} else if (65 <= ch && ch <= 90) {
		  	rotated += String.fromCharCode( (ch-65 + 13) % 26 + 65);
		} else {
		  	rotated += s[i];
		} 
	}
	return rotated;
}
/**
 * 内网统一登录
 * @param  {[type]} req [description]
 * @param  {[type]} res [description]
 * @return {[type]}     [description]
 */
var uuap = module.exports = function(req, res){
	this.init(req, res);
}
/**
 * 直接获取用户信息
 * @param  {[type]} req     [description]
 * @param  {[type]} res     [description]
 * @param  {[type]} destUrl [description]
 * @return {[type]}         [description]
 */
uuap.getUserInfo = function(req, res, destUrl){
	return (new uuap(req, res)).getUserInfo(destUrl);
}
/**
 * 退出登录
 * @param  {[type]} req [description]
 * @param  {[type]} res [description]
 * @return {[type]}     [description]
 */
uuap.logout = function(req, res){
	return (new uuap(req, res)).logout();
}

uuap.prototype = {
	init: function(req, res){
		this._tcInfo = {};
		this._qcInfo = {};
		this._allowDomain = ['.qihoo.net','.360.cn'];
		//this._defaultDomain = ".qihoo.net";
		this._defaultDomain = "";
		this._salt = "qIHoDomsy";
		this._login_url = "https://login.ops.qihoo.net:4430/sec/login";
		//this._bak_login_url = "https://tool4.ops.dxt.qihoo.net:4430/sec/login";
		this._timeout = 86400 * 1000;
		//this.userInfo = {};

		this.req = req;
		this.res = res;

		//请求带过来的cookie
		this._cookie = cookie.parse(req.headers.cookie || "");
		//query参数
		var urlInfo = url.parse("//" + req.headers.host + req.url, true, true);
		this._query = urlInfo.query;

		this._tcookie = this.cookie("TD");
		this._qcookie = this.cookie("QD");

	},
	/**
	 * 获取query参数
	 * @param  {[type]} name [description]
	 * @return {[type]}      [description]
	 */
	get: function(name){
		return this._query[name] || "";
	},
	/**
	 * 获取或者设置cookie
	 * @param  {[type]} name  [description]
	 * @param  {[type]} value [description]
	 * @return {[type]}       [description]
	 */
	cookie: function(name, value, options){
		if (value === undefined) {
			return this._cookie[name] || "";
		}else{
			options = options || {};
            if (typeof options == 'number') {
                options = {
                    expires: options
                }
            };
            var expires = options.expires;
            if (expires === undefined) {
                expires = this._timeout;
            };
            delete options.expires;
            //if value is null, remove cookie
            if (value === null) {
                expires = -86400;
            };
            var defaultOptions = {
                path: "/",
                expires: new Date (Date.now() + expires)
            };
            if (expires === 0) {
                delete defaultOptions.expires;
            };
            options = extend(defaultOptions, options || {});
            value = cookie.serialize(name, value, options);
            return value;
		}
	},
	checkQUCookie: function(destUrl){
		var userInfo = {};
		var self = this;
		if (!this._isExistQC() || !this._isValidLoginTime() || !this._isValidQC(userInfo)) {
			var sid = this._getSid();
			var deferred = when.defer();
			if (sid) {
				return this._getUserInfoBySid(sid).then(function(userInfo){
					if (Object.keys(userInfo).length > 0) {
						self._setCookie(userInfo);
						return userInfo;
					}else{
						if (destUrl === false) {
							deferred.resolve({});
						}else{
							self._sendUserToQUC(destUrl);
						}
						return deferred.promise;
					}
				})
			}else{
				if (destUrl === false) {
					deferred.resolve({});
				}else{
					self._sendUserToQUC(destUrl);
				}
				return deferred.promise;
			}
		};
		return get_promise(userInfo);
	},
	/**
	 * 获取用户信息
	 * @param  {[type]} destUrl [description]
	 * @return {[type]}         [description]
	 */
	getUserInfo: function(destUrl){
		return this.checkQUCookie(destUrl);
	},	
	/**
	 * 退出
	 * @return {[type]} [description]
	 */
	logout: function(){
		var cqd = this.cookie('QD', "", {
			expires: this._timeout,
			path: "/",
			domain: this._defaultDomain
		});
		var ctd = this.cookie('TD', "", {
			expires: this._timeout,
			path: "/",
			domain: this._defaultDomain
		});
		this.res.setHeader("Set-Cookie", [cqd, ctd]);
		return true;
	},
	/**
	 * 设置TD和QD的cookie
	 * @param {[type]} userInfo [description]
	 */
	_setCookie: function(userInfo){
		var td = this._getTd(userInfo);
		var qd = this._getQd(userInfo);
		var domain = this._createDomain();
		var cqd = this.cookie('QD', qd, {
			expires: this._timeout,
			path: "/",
			domain: domain
		});
		var ctd = this.cookie('TD', td, {
			expires: this._timeout,
			path: "/",
			domain: domain
		});
		this.res.setHeader("Set-Cookie", [cqd, ctd]);
		this._tcookie = td;
		this._qcookie = qd;
		return true;
	},
	/**
	 * 创建设置cookie的domain
	 * @return {[type]} [description]
	 */
	_createDomain: function(){
		var domain = this._defaultDomain;
		var urlInfo = url.parse("//" + this.req.headers.host + this.req.url, true, true);
		var hostname = urlInfo.hostname;
		var hostArr = hostname.split(".");
		var count = hostArr.length;
		var d = "." + hostArr[count - 2] + "." + hostArr[count - 1];
		if (this._allowDomain.indexOf(d) > -1) {
			domain = d;
		};
		return domain;
	},
	_getTd: function(userInfo){
		var signData = extend({}, userInfo);
		var loginTime = Date.now();
		signData = extend(signData, {"loginTime": loginTime});
		return querystring.stringify({
			"t": loginTime,
			"s": this._getSign(signData),
			"a": 1
		})
	},
	_getQd: function(userInfo){
		return querystring.stringify({
			"u": this._decrypt(userInfo["userName"]),
			"m": this._decrypt(userInfo["userMail"]),
			"d": this._decrypt(userInfo["displayName"])
		})
	},
	_decrypt: function(data){
		return rot13(data);
	},
	_isExistQC: function(){
		if (this._tcookie === "" || this._qcookie === "") {
			return false;
		};
		return true;
	},
	/**
	 * 跳转统一登录的页面
	 * @param  {[type]} destUrl [description]
	 * @return {[type]}         [description]
	 */
	_sendUserToQUC: function(destUrl){
		destUrl = this._createDestUrl(destUrl);
		var url = this._login_url + "?ref=" + destUrl;
		this.res.statusCode = 302;
		this.res.setHeader("Location", url);
		this.res.end();
	},
	/**
	 * 获取用户信息，返回promise
	 * @param  {[type]} sid [description]
	 * @return {[type]}     [description]
	 */
	_getUserInfoBySid: function(sid){
		var deferred = when.defer();
		var url = this._login_url + "?sid="+sid;
		request({
			url: url,
			strictSSL: false
		}, function(error, response, body){
			var userInfo = {};
			if (!error && body && body != "None") {
				var data = JSON.parse(body);
				userInfo['userMail'] = data.mail;
				userInfo['userName'] = data.user;
				var display = data.display;
				if (!display) {
					display = data.mail.substr(0, data.mail.indexOf('@'));
				};
				userInfo['displayName'] = display;
			};
			deferred.resolve(userInfo);
		});
		return deferred.promise;
	},
	// _checkLoginUrlValid: function(){
	// 	var url = this._login_url;
	// },
	_createDestUrl: function(destUrl){
		destUrl = (destUrl || "").trim();
		if (!destUrl) {
			destUrl = "http://" + this.req.headers.host + this.req.url;
		};
		return encodeURIComponent(destUrl);
	},
	/**
	 * 检测cookie里保存的时间是否超时
	 * @return {Boolean} [description]
	 */
	_isValidLoginTime: function(){
		this._getTCInfo();
		if (this._tcInfo['keepAlive']) {
			return true;
		};
		var term = Date.now() - parseInt(this._tcInfo['loginTime'], 10);
		return term <= this._timeout;
	},
	_getQCInfo: function(){
		var arr = querystring.parse(this._qcookie);
		this._qcInfo['userMail'] = this._decrypt(arr['m'] || "");
		this._qcInfo['userName'] = this._decrypt(arr['u'] || "");
		this._qcInfo['displayName'] = this._decrypt(arr['d'] || "");
	},
	_getTCInfo: function(){
		var arr = querystring.parse(this._tcookie);
		this._tcInfo['loginTime'] = arr['t'] || "";
		this._tcInfo['signature'] = arr['s'] || "";
		this._tcInfo['keepAlive'] = arr['a'] || "";
	},
	_isValidQC: function(userInfo){
		if (this._vSign()) {
			var info = this._fillUserInfo();
			extend(userInfo, info);
			return true;
		};
		return false;
	},
	_fillUserInfo: function(){
		return {
			"userMail": this._qcInfo['userMail'],
			"userName": this._qcInfo['userName'],
			"displayName": this._qcInfo['displayName'],
			"loginTime": this._tcInfo['loginTime']
		}
	},
	_vSign: function(){
		this._getQCInfo();
		var str = this._qcInfo['userName'] + this._qcInfo['userMail'] + this._qcInfo['displayName'] + this._tcInfo['loginTime'];
		var signature = this._tcInfo['signature'];
		return this._verify(str, signature);
	},
	_verify: function(data, signature){
		var newStr = md5(data + this._salt);
		return newStr == signature;
	},
	_getSid: function(){
		return this.get("sid");
	},
	_getSign: function(data){
		var str = data.userName + data.userMail + data.displayName + data.loginTime + this._salt;
		return md5(str);
	}
};